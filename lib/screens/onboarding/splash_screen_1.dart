// Corrige ou commente l'import si le fichier n'existe pas
// import '../utils/app_theme.dart';

import 'package:flutter/material.dart';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';
import '../../utils/app_theme.dart';
import '../main_navigation_screen.dart';
import 'dart:math' as math;

void main() {
  runApp(const FigmaToCodeApp());
}

// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class FigmaToCodeApp extends StatelessWidget {
  const FigmaToCodeApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        body: ListView(children: const [
          SplashScreen1(),
        ]),
      ),
    );
  }
}

class SplashScreen1 extends StatefulWidget {
  const SplashScreen1({Key? key}) : super(key: key);

  @override
  State<SplashScreen1> createState() => _SplashScreen1State();
}

class _SplashScreen1State extends State<SplashScreen1>
    with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _cardsController;
  late Animation<double> _logoAnimation;
  
  List<FloatingCard> _floatingCards = [];
  final List<String> _messages = [
    "Salut ! Comment √ßa va ? üòä",
    "J'adore ton profil ! üíï",
    "Merci Smooth IA ! üöÄ",
    "Super conversation ! üí¨",
    "Message parfait ! üéØ"
  ];

  @override
  void initState() {
    super.initState();
    
    // Animation du logo
    _logoController = AnimationController(
      duration: Duration(seconds: 2),
      vsync: this,
    );
    
    _logoAnimation = Tween<double>(
      begin: -1.0,
      end: 0.0,
    ).animate(CurvedAnimation(
      parent: _logoController,
      curve: Curves.easeOutBack,
    ));


    
    // Animation des cartes
    _cardsController = AnimationController(
      duration: Duration(seconds: 1),
      vsync: this,
    );
    
    // D√©marrer les animations
    Future.delayed(Duration(milliseconds: 500), () {
      _logoController.forward();
    });
    
    // Navigation vers l'√©cran suivant apr√®s l'animation
    Future.delayed(Duration(seconds: 4), () {
      if (mounted) {
        _checkOnboardingStatus();
      }
    });
    
    // Cr√©er les cartes initiales
    _createInitialCards();
    
    // Cr√©er de nouvelles cartes p√©riodiquement
    _startCardCreation();
  }

  void _createInitialCards() {
    for (int i = 0; i < 3; i++) {
      _createFloatingCard(delay: i * 4000);
    }
  }

  void _startCardCreation() {
    Future.delayed(Duration(seconds: 6), () {
        if (mounted) {
        _createFloatingCard();
        _startCardCreation();
      }
    });
  }

  void _createFloatingCard({int delay = 0}) {
    final random = math.Random();
    final message = _messages[random.nextInt(_messages.length)];
    final startX = random.nextDouble() * 0.7 + 0.15; // Entre 15% et 85%
    final duration = random.nextInt(3000) + 11000; // Entre 11-14 secondes
    
    Future.delayed(Duration(milliseconds: delay), () {
      if (mounted) {
        setState(() {
          _floatingCards.add(FloatingCard(
            message: message,
            startX: startX,
            duration: duration,
            onComplete: () {
              setState(() {
                _floatingCards.removeWhere((card) => card.message == message);
              });
            },
          ));
      });
      }
    });
  }

  Future<void> _checkOnboardingStatus() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final hasSeenOnboarding = prefs.getBool('has_seen_onboarding') ?? false;
      
      print('üîç DEBUG: has_seen_onboarding = $hasSeenOnboarding');
      
      if (mounted) {
        if (hasSeenOnboarding) {
          print('üöÄ DEBUG: Aller directement √† l\'√©cran principal');
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => const MainNavigationScreen(),
            ),
          );
        } else {
          print('üì± DEBUG: Afficher l\'onboarding');
          Navigator.pushReplacementNamed(context, '/onboarding');
        }
      }
    } catch (e) {
      print('‚ùå DEBUG: Erreur lors de la v√©rification: $e');
      if (mounted) {
        Navigator.pushReplacementNamed(context, '/onboarding');
      }
    }
  }

  @override
  void dispose() {
    _logoController.dispose();
    _cardsController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: AppTheme.buildPickupScreenBackground(
      child: Stack(
          children: [
            // Particules scintillantes
            ..._buildSparkles(),
            
            // Cartes flottantes
            ..._floatingCards,
            
            // Logo central
            Center(
              child: AnimatedBuilder(
                animation: _logoController,
            builder: (context, child) {
                  return Transform.translate(
                    offset: Offset(0, _logoAnimation.value * MediaQuery.of(context).size.height),
                    child: Transform.scale(
                      scale: _logoController.isCompleted
                          ? (1.0 + 0.05 * math.sin(_logoController.value * 4 * math.pi))
                          : 1.0,
                                            child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Container(
                            width: 160,
                            height: 160,
                            child: Image.asset(
                              'assets/images/logo.png',
                              fit: BoxFit.contain,
                            ),
                          ),
                          SizedBox(height: 16),
                          Text(
                            'DATING ASSISTANT',
                            style: TextStyle(
                              fontSize: 16,
                              color: Color(0xFF64748B),
                              fontWeight: FontWeight.w400,
                              letterSpacing: 3,
                            ),
                      ),
                    ],
                  ),
                ),
              );
            },
              ),
            ),
          ],
        ),
      ),
    );
  }

  List<Widget> _buildSparkles() {
    return List.generate(5, (index) {
      final random = math.Random(index);
      return AnimatedSparkle(
        left: random.nextDouble() * 0.9 + 0.05,
        top: random.nextDouble() * 0.9 + 0.05,
        delay: random.nextInt(2000),
      );
    });
  }
}

class FloatingCard extends StatefulWidget {
  final String message;
  final double startX;
  final int duration;
  final VoidCallback onComplete;

  const FloatingCard({
    Key? key,
    required this.message,
    required this.startX,
    required this.duration,
    required this.onComplete,
  }) : super(key: key);

  @override
  _FloatingCardState createState() => _FloatingCardState();
}

class _FloatingCardState extends State<FloatingCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animationY;
  late Animation<double> _animationScale;
  late Animation<double> _animationOpacity;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(milliseconds: widget.duration),
      vsync: this,
    );

    _animationY = Tween<double>(
      begin: 1.0,
      end: -0.1,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));

    _animationScale = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Interval(0.0, 0.15, curve: Curves.easeOut),
    ));

    _animationOpacity = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Interval(0.0, 0.15, curve: Curves.easeOut),
    ));

    _controller.forward().then((_) {
      widget.onComplete();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Positioned(
          left: widget.startX * MediaQuery.of(context).size.width - 140,
          top: _animationY.value * MediaQuery.of(context).size.height,
          child: Transform.scale(
            scale: _animationScale.value,
          child: Opacity(
              opacity: _animationOpacity.value,
            child: Container(
                constraints: BoxConstraints(
                  maxWidth: 200,
                  minWidth: 100,
                ),
                padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              decoration: BoxDecoration(
                  color: Color(0xFF3B82F6).withOpacity(0.95),
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                    bottomLeft: Radius.circular(20),
                    bottomRight: Radius.circular(4),
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Color(0xFF3B82F6).withOpacity(0.3),
                      blurRadius: 12,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
                child: Text(
                  widget.message,
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                    height: 1.3,
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }
}

class AnimatedSparkle extends StatefulWidget {
  final double left;
  final double top;
  final int delay;

  const AnimatedSparkle({
    Key? key,
    required this.left,
    required this.top,
    required this.delay,
  }) : super(key: key);

  @override
  _AnimatedSparkleState createState() => _AnimatedSparkleState();
}

class _AnimatedSparkleState extends State<AnimatedSparkle>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: Duration(seconds: 3),
      vsync: this,
    );

    _animation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));

    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) {
        _controller.repeat(reverse: true);
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Positioned(
      left: widget.left * MediaQuery.of(context).size.width,
      top: widget.top * MediaQuery.of(context).size.height,
      child: AnimatedBuilder(
        animation: _animation,
              builder: (context, child) {
          return Transform.scale(
            scale: _animation.value,
            child: Container(
              width: 4,
              height: 4,
                  decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                );
              },
      ),
    );
  }
}