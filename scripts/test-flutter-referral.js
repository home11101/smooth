const fs = require('fs');

// Configuration Supabase
const SUPABASE_URL = 'https://qlomkoexurbxqsezavdi.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFsb21rb2V4dXJieHFzZXphdmRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzODYxOTYsImV4cCI6MjA2Njk2MjE5Nn0.eVV4vRp1a_5FVMqqRcSHFC5cjaBEOKCODHZQ76fpED8';

async function testFlutterReferralSystem() {
  try {
    console.log('üß™ Test du syst√®me de parrainage pour Flutter...\n');

    // Test 1: V√©rifier que les tables existent
    console.log('1Ô∏è‚É£ V√©rification des tables...');
    const tables = ['referral_codes', 'referral_usage', 'user_referral_points', 'referral_rewards'];
    
    for (const table of tables) {
      try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}?select=count`, {
          method: 'GET',
          headers: {
            'apikey': SUPABASE_KEY,
            'Authorization': `Bearer ${SUPABASE_KEY}`,
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ Table ${table} accessible (${data.length} enregistrements)`);
        } else {
          console.log(`‚ùå Table ${table} non accessible (${response.status})`);
        }
      } catch (error) {
        console.log(`‚ùå Erreur table ${table}: ${error.message}`);
      }
    }

    // Test 2: V√©rifier que les fonctions existent
    console.log('\n2Ô∏è‚É£ V√©rification des fonctions...');
    const functions = [
      { name: 'create_referral_code', params: { p_device_id: 'test_flutter_device' } },
      { name: 'get_user_referral_stats', params: { p_device_id: 'test_flutter_device' } },
      { name: 'use_referral_code', params: { p_code: 'TEST1234', p_referred_device_id: 'test_flutter_device_2', p_subscription_type: 'premium_monthly' } }
    ];

    for (const func of functions) {
      try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/${func.name}`, {
          method: 'POST',
          headers: {
            'apikey': SUPABASE_KEY,
            'Authorization': `Bearer ${SUPABASE_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(func.params)
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ Fonction ${func.name} accessible`);
          console.log(`   R√©sultat: ${JSON.stringify(result).substring(0, 100)}...`);
        } else {
          const errorText = await response.text();
          console.log(`‚ùå Fonction ${func.name} non accessible (${response.status})`);
          console.log(`   Erreur: ${errorText.substring(0, 100)}...`);
        }
      } catch (error) {
        console.log(`‚ùå Erreur fonction ${func.name}: ${error.message}`);
      }
    }

    // Test 3: Test complet du flux de parrainage
    console.log('\n3Ô∏è‚É£ Test complet du flux de parrainage...');
    
    const testDeviceId = `flutter_test_${Date.now()}`;
    
    // Cr√©er un code de parrainage
    console.log(`   Cr√©ation d'un code pour ${testDeviceId}...`);
    const createResponse = await fetch(`${SUPABASE_URL}/rest/v1/rpc/create_referral_code`, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_KEY,
        'Authorization': `Bearer ${SUPABASE_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        p_device_id: testDeviceId
      })
    });

    if (createResponse.ok) {
      const code = await createResponse.text();
      console.log(`   ‚úÖ Code cr√©√©: ${code}`);

      // R√©cup√©rer les statistiques
      console.log(`   R√©cup√©ration des statistiques...`);
      const statsResponse = await fetch(`${SUPABASE_URL}/rest/v1/rpc/get_user_referral_stats`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_KEY,
          'Authorization': `Bearer ${SUPABASE_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          p_device_id: testDeviceId
        })
      });

      if (statsResponse.ok) {
        const stats = await statsResponse.json();
        console.log(`   ‚úÖ Statistiques r√©cup√©r√©es:`, stats);
      } else {
        console.log(`   ‚ùå Erreur r√©cup√©ration stats`);
      }
    } else {
      console.log(`   ‚ùå Erreur cr√©ation code`);
    }

    console.log('\n‚úÖ Tests termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

async function generateFlutterTestInstructions() {
  try {
    console.log('\nüì± Instructions pour tester l\'application Flutter :\n');

    const instructions = `# Test de l'Application Flutter - Syst√®me de Parrainage

## Pr√©requis
- Les tables et fonctions SQL ont √©t√© cr√©√©es dans Supabase
- L'application Flutter est compil√©e et pr√™te

## √âtapes de test

### 1. Test de l'√©cran Premium
1. Ouvrez l'application Flutter
2. Allez dans l'√©cran Premium
3. V√©rifiez que la section parrainage s'affiche
4. V√©rifiez que les statistiques se chargent

### 2. Test du menu Parrainage
1. Ouvrez le menu principal (ic√¥ne hamburger)
2. Cliquez sur "Parrainage"
3. V√©rifiez que la page de parrainage s'ouvre
4. V√©rifiez que les statistiques s'affichent

### 3. Test du flux d'achat
1. Effectuez un achat premium (test)
2. V√©rifiez que le dialogue de succ√®s s'affiche
3. V√©rifiez que le code de parrainage est visible
4. Testez les boutons copier/partager

### 4. Test des fonctionnalit√©s
1. Copiez un code de parrainage
2. Partagez un code de parrainage
3. V√©rifiez que les points se mettent √† jour

## Points √† v√©rifier

### Interface utilisateur
- [ ] Section parrainage visible dans l'√©cran premium
- [ ] Page de parrainage accessible via le menu
- [ ] Dialogue de succ√®s apr√®s achat
- [ ] Boutons copier/partager fonctionnels

### Fonctionnalit√©s
- [ ] G√©n√©ration de codes de parrainage
- [ ] Affichage des statistiques
- [ ] Copie des codes dans le presse-papiers
- [ ] Partage des codes

### Int√©gration
- [ ] Connexion √† Supabase fonctionnelle
- [ ] Appels API sans erreur
- [ ] Gestion des erreurs appropri√©e

## Debug

Si des erreurs surviennent :
1. V√©rifiez les logs de l'application
2. V√©rifiez la console de d√©veloppement
3. V√©rifiez les logs Supabase
4. Testez les fonctions SQL directement

## Support

Pour toute question technique : contact@smoothai.app
`;

    fs.writeFileSync('./scripts/flutter-test-instructions.md', instructions);
    console.log('‚úÖ Instructions de test Flutter sauvegard√©es dans : scripts/flutter-test-instructions.md');

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des instructions:', error);
  }
}

async function main() {
  try {
    console.log('üöÄ Test du syst√®me de parrainage Flutter...\n');

    await testFlutterReferralSystem();
    await generateFlutterTestInstructions();

    console.log('\nüéä Tests termin√©s !');
    console.log('\nüìã Prochaines √©tapes :');
    console.log('1. Ex√©cutez le script SQL dans Supabase');
    console.log('2. Testez l\'application Flutter');
    console.log('3. V√©rifiez toutes les fonctionnalit√©s');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

main(); 